# nixpacks.toml (in your translation-worker directory)

[phases.setup]
# Attempting to install common build tools and some graphics libraries via Nix packages.
# Exact Nix package names for canvas dependencies can be specific.
# Start with build essentials and common tools.
# Common Nix package names that might provide C/C++ build toolchain and canvas dependencies.
# If these specific names aren't found, the Nixpacks build log should indicate it.
nixPkgs = [
  "gcc",             # GNU Compiler Collection (for C/C++)
  "gnumake",         # make utility
  "pkg-config",      # Helper tool used when compiling applications and libraries
  "nodejs",          # Node.js (includes npm)
  "python3",         # Python 3 for node-gyp
  "which",           # For `which python3` command
  "poppler_utils",   # Poppler utilities
  "zlib",            # Data compression library
  "libpng",          # PNG image format library
  "libjpeg",         # JPEG image compression library
  "giflib"           # GIF image format library
]

# The top-level aptPkgs might not be the preferred way for Railway's Nixpacks if [phases.setup].nixPkgs is used.
# Commenting out to avoid conflict and focus on the nixPkgs approach first.
# aptPkgs = ["build-essential", "libcairo2-dev", "libpango1.0-dev", "libjpeg-dev", "libgif-dev", "librsvg2-dev"]

# The following phases are often inferred correctly by Nixpacks for a Node.js project
# with a package.json. You can uncomment and customize if needed.

[phases.install]
# Debug: Check python availability and PATH before trying to install
cmds = [
  "echo 'Setting up build environment...'",
  "export PKG_CONFIG_PATH=/nix/var/nix/profiles/default/lib/pkgconfig:/nix/var/nix/profiles/default/share/pkgconfig",
  "export LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib",
  "export PYTHON=/root/.nix-profile/bin/python3",
  "export PYTHON_COMMAND_PATH=/root/.nix-profile/bin/python3",
  "export npm_config_build_from_source=true",
  "echo 'Running npm install...'",
  "npm install --verbose"
]

[phases.build]
cmds = ["npm run build"] # Assumes tsc compilation via `npm run build`

[start]
cmd = "npm run start" # Assumes `node dist/index.js` via `npm run start` 