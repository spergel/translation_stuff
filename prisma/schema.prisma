// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  tier             String    @default("free") // free, basic, pro, enterprise
  isEduEmail       Boolean   @default(false)
  storageUsedBytes BigInt    @default(0)
  documentsCount   Int       @default(0)
  
  // Stripe subscription fields
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  stripeSubscriptionStatus String? // active, canceled, past_due, etc.
  subscriptionPeriodEnd  DateTime?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  documents     Document[]
  folders       Folder[]
  usageRecords  UsageRecord[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Document {
  id                   String    @id @default(cuid())
  userId               String
  originalFilename     String
  title                String
  status               String    @default("queued") // queued, processing, completed, failed
  progress             Int       @default(0)
  
  // File metadata
  originalFileSize     BigInt
  originalFileUrl      String?
  pageCount            Int?
  
  // Translation settings
  targetLanguage       String
  translationSettings  Json?
  
  // Output files
  translatedPdfUrl     String?
  translatedHtmlUrl    String?
  thumbnailUrl         String?
  
  // Organization
  folderId             String?
  tags                 String[]
  isFavorited          Boolean   @default(false)
  
  // Usage tracking
  processingTimeMs     Int?
  tokensUsed           Int?
  
  // Timestamps
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  completedAt          DateTime?
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  folder       Folder?      @relation(fields: [folderId], references: [id], onDelete: SetNull)
  usageRecords UsageRecord[]
}

model Folder {
  id               String    @id @default(cuid())
  userId           String
  name             String
  color            String?   // hex color
  parentFolderId   String?
  createdAt        DateTime  @default(now())
  
  // Relations
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentFolder Folder?    @relation("FolderHierarchy", fields: [parentFolderId], references: [id], onDelete: Cascade)
  childFolders Folder[]   @relation("FolderHierarchy")
  documents    Document[]
}

model UsageRecord {
  id               String   @id @default(cuid())
  userId           String
  documentId       String?
  pagesProcessed   Int
  tokensUsed       Int?
  processingTimeMs Int?
  createdAt        DateTime @default(now())
  
  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: SetNull)
}
